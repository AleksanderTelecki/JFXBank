@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "utils.DBcontroller"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_111612081 { 
   	label=utils
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   DBcontroller111612081[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DBcontroller</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Connect()</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteUser(ID: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ executeQuery(queryToExecute: String): ResultSet</TD></TR>
<TR><TD ALIGN="LEFT" >+ executeStatement(statementToExecute: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBalance(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBankUser(ID: int): BankUser</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBankUser(Email: String, Password: String, BAcN: String): BankUser</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCreditBalance(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCreditDiff(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCredits(ID: int, BAcN: String): Credits</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEarnedSavings(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getID(BAcN: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInvestment(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOperationsList(ID: int): List&lt;Operations&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOverdraft(ID: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSavings(ID: int): Savings</TD></TR>
<TR><TD ALIGN="LEFT" >+ initializeBank()</TD></TR>
<TR><TD ALIGN="LEFT" >+ insertCredits(ID: int, BAcN: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ insertInvestment(ID: int, investment: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ insertOperation(ID: int, Description: String, Type: String, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAdminKey(adminKey: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ registerUser(bankUser: BankUser)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateBalance(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateCreditBalance(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateCreditLimit(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateDateTime()</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateEarnedSavings(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateEarnedSavingsDate(ID: int, date: String, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateInvestment(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateOverdraft(ID: int, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateOverdraftWithDate(ID: int, Date: String, amount: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateUser(ID: int, newBankUser: BankUser)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    

    
}
@enduml